FROM public.ecr.aws/ubuntu/ubuntu:22.04
SHELL ["/bin/bash", "-c"]

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive

# Install dependencies
RUN apt-get update && apt-get install -y \
    software-properties-common \
    build-essential \
    python3-pip \
    git \
    git-lfs \
    libhwloc-dev \
    pandoc \
    libtbb-dev \
    libcapstone-dev \
    pkg-config \
    linux-tools-generic \
    ninja-build \
    wget \
    cmake \
    ccache \
    doxygen \
    libgtest-dev \
    libgmock-dev \
    graphviz \
    patchelf \
    libyaml-cpp-dev \
    libboost-all-dev \
    jq \
    curl \
    gh \
    expect \
    lcov \
    libgl1 \
    libglx-mesa0 \
    unzip \
    xxd

# Upgrade pip, setuptools, wheel (do this *after* installing python3-pip)
RUN pip install --upgrade pip setuptools wheel

# Install clang 17
RUN wget https://apt.llvm.org/llvm.sh && \
    chmod u+x llvm.sh && \
    ./llvm.sh 17 && \
    apt install -y libc++-17-dev libc++abi-17-dev && \
    ln -s /usr/bin/clang-17 /usr/bin/clang && \
    ln -s /usr/bin/clang++-17 /usr/bin/clang++

# Install mpi-ulfm from the tenstorrent repo
RUN set -eux; \
    apt-get update && \
    apt-get install -y -f \
        wget ca-certificates && \
    TMP_DIR="$(mktemp -d)" && \
    DEB_URL="https://github.com/dmakoviichuk-tt/mpi-ulfm/releases/download/v5.0.7-ulfm/openmpi-ulfm_5.0.7-1_amd64.deb" && \
    wget -qO "$TMP_DIR/ompi.deb" "$DEB_URL" && \
    apt-get install -f -y "$TMP_DIR/ompi.deb" && \
    rm -rf "$TMP_DIR"

# Install deadsnakes PPA for latest Python versions
RUN add-apt-repository ppa:deadsnakes/ppa && \
    apt-get update && \
    apt-get install -y \
    python3.11 \
    python3.11-dev \
    python3.11-venv \
    python3-pip

# Install python packages
RUN pip install cmake \
    pytest

# Set environment variables for toolchain directories
ENV TTFORGE_TOOLCHAIN_DIR=/opt/ttforge-toolchain

# Create a directory for the build and toolchain
ARG BUILD_DIR=/home/build
RUN mkdir -p $BUILD_DIR && \
    mkdir -p $TTMLIR_TOOLCHAIN_DIR && \
    mkdir -p $TTFORGE_TOOLCHAIN_DIR

# Create the virtual environment that forge-fe will use
ENV TTFORGE_VENV_DIR=/opt/ttforge-toolchain/venv
RUN python3.11 -m venv $TTFORGE_VENV_DIR

# Copy and install core requirements in the forge-fe virtual environment
COPY env/core_requirements.txt /tmp/core_requirements.txt
RUN source $TTFORGE_VENV_DIR/bin/activate && \
    pip install --no-cache-dir -r /tmp/core_requirements.txt

# Ensure venv Python is used by default in derived contexts
ENV PATH="/opt/ttforge-toolchain/venv/bin:${PATH}"
