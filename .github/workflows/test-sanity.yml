name: Sanity Test - Forge Add

on:
  workflow_call:
    inputs:
      run_id:
        description: 'Run id to download wheels from'
        required: false
        type: string
      docker-image:
        description: 'Docker image to use for test'
        required: true
        type: string
      runs-on:
        description: 'Runs on'
        required: false
        type: string
        default: '[{"runs-on": "n150"}, {"runs-on": "n300"}]'

permissions:
  packages: read
  actions: read
  checks: write

jobs:
  sanity-forge-test:
    strategy:
      fail-fast: false
      matrix:
        build: ${{ fromJson(inputs.runs-on) }}

    runs-on:
      - in-service
      - ${{ matrix.build.runs-on }}

    container:
      image: ${{ inputs.docker-image }}
      options: --device /dev/tenstorrent/0
      volumes:
        - /dev/hugepages:/dev/hugepages
        - /dev/hugepages-1G:/dev/hugepages-1G
        - /etc/udev/rules.d:/etc/udev/rules.d
        - /lib/modules:/lib/modules
        - /opt/tt_metal_infra/provisioning/provisioning_env:/opt/tt_metal_infra/provisioning/provisioning_env
        - /mnt/dockercache:/mnt/dockercache

    name: "sanity-forge-test (${{ matrix.build.runs-on }})"

    steps:
      - name: Fetch job id
        id: fetch-job-id
        uses: tenstorrent/tt-github-actions/.github/actions/job_id@main
        with:
          job_name: "sanity-forge-test (${{ matrix.build.runs-on }})"

      - name: Set reusable strings
        id: strings
        shell: bash
        env:
          JOB_ID: ${{ steps.fetch-job-id.outputs.job_id }}
        run: |
          echo "work-dir=$(pwd)" >> "$GITHUB_OUTPUT"
          echo "build-output-dir=$(pwd)/build" >> "$GITHUB_OUTPUT"
          echo "test_report_path=reports/report_$JOB_ID.xml" >> "$GITHUB_OUTPUT"

      - name: Git safe dir
        run: git config --global --add safe.directory ${{ steps.strings.outputs.work-dir }}

      - uses: actions/checkout@v4
        with:
          sparse-checkout: |
            .github/workflows/
            env/
            forge/test
            pytest.ini
            conftest.py
            .test_durations

      - name: Setup Forge Models repo
        shell: bash
        run: |
          git submodule update --init --recursive -f third_party/tt_forge_models

      - name: Cleanup submodules
        run: |
          git submodule foreach --recursive git clean -ffdx
          git submodule foreach --recursive git reset --hard

      - name: Download wheel
        if: ${{ inputs.run_id }}
        continue-on-error: true
        uses: tenstorrent/tt-forge/.github/actions/download-artifact@main
        with:
          name: forge-wheel
          run_id: ${{ inputs.run_id }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create temporary directory for artifacts
        run: mkdir -p ${{ runner.temp }}/artifacts/

      - name: Find and download forge wheel
        if: ${{ !inputs.run_id }}
        uses: dawidd6/action-download-artifact@v9
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          workflow_conclusion: success
          workflow_search: true
          workflow: on-push.yml
          name: forge-wheel
          repo: tenstorrent/tt-forge-fe
          check_artifacts: true
          search_artifacts: true
          path: ${{ runner.temp }}/artifacts/

      - name: Install wheel
        shell: bash
        run: |
          source env/activate
          pip install tt_tvm*.whl --force-reinstall
          pip install compiler/tt_forge_fe_compiler*.whl --force-reinstall

      - name: Run Test
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
          HF_HOME: /mnt/dockercache/huggingface
          FORGE_MODELS_CACHE: /mnt/dockercache/forge_models_cache
          HF_HUB_DISABLE_PROGRESS_BARS: 1
          FORGE_DISABLE_REPORTIFY_DUMP: 1
        shell: bash
        run: |
          # Verify artifact contents
          if [ ! -f "${{ runner.temp }}/artifacts/tt_tvm*.whl" ] || [ ! -f "${{ runner.temp }}/artifacts/compiler/tt_forge_fe_compiler*.whl" ]; then
            echo "Error: Expected wheel files not found in artifacts."
            exit 1
          fi

          source env/activate
          echo "Collecting sanity tests..."
          pytest --splits 1 \
               --group 1 \
               --splitting-algorithm least_duration \
               -m "sanity" --collect-only -q forge/test/test_sanity_forge_add.py \
                | sed -n '/^Collected tests /,/^collected /p' | sed '/^[Cc]ollected /d' >.pytest_tests_to_run

          echo "Collected tests."
          cat .pytest_tests_to_run

          set +e
          python .github/workflows/test_runner.py  \
               --junit-xml=${{ steps.strings.outputs.test_report_path }} \
               --log-memory-usage
          exit_code=$?

          if [ -f "crashed_pytest.log" ]; then
            echo "Creating crash summary for the job..."
            echo "### Crashed tests:" >>$GITHUB_STEP_SUMMARY
            cat crashed_pytest.log >>$GITHUB_STEP_SUMMARY
          fi
          exit $exit_code

      - name: Upload Test Log
        uses: actions/upload-artifact@v4
        if: success() || failure()
        with:
          name: test-log-${{ matrix.build.runs-on }}-sanity-${{ steps.fetch-job-id.outputs.job_id }}
          path: pytest.log

      - name: Upload Test Crash Log
        uses: actions/upload-artifact@v4
        if: success() || failure()
        with:
          name: test-crash-log-${{ matrix.build.runs-on }}-sanity-${{ steps.fetch-job-id.outputs.job_id }}
          path: crashed_pytest.log

      - name: Upload Memory Usage Log
        uses: actions/upload-artifact@v4
        if: success() || failure()
        with:
          name: memory-usage-${{ matrix.build.runs-on }}-sanity-${{ steps.fetch-job-id.outputs.job_id }}
          path: pytest-memory-usage.csv

      - name: Upload Test Report
        uses: actions/upload-artifact@v4
        if: success() || failure()
        with:
          name: test-reports-sanity-${{ steps.fetch-job-id.outputs.job_id }}
          path: ${{ steps.strings.outputs.test_report_path }}

      - name: Show Test Report
        uses: mikepenz/action-junit-report@v5
        if: success() || failure()
        with:
          report_paths: ${{ steps.strings.outputs.test_report_path }}
          check_name: TT-Forge-FE Sanity Tests
          comment: false
          updateComment: false
          detailed_summary: true
          group_suite: true

      - name: Upload test results to Codecov
        if: success() || failure()
        uses: codecov/test-results-action@v1
        with:
          files: ${{ steps.strings.outputs.test_report_path }}
          disable_search: true
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Cleanup
        if: always()
        shell: bash
        run: |
          rm -rf *.whl
