name: Update Test Durations

description: |
  This workflow updates test durations based on the latest nightly and push workflow runs.
  It processes the JUnit XML reports from the last successful nightly and push workflows,
  calculates the test durations, and creates a pull request to update the `.test_durations` file.

on:
  workflow_dispatch:

permissions:
  packages: write
  checks: write

jobs:
  update_test_durations:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          # ref: main
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Process nightly test durations
        id: get-test-durations
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          repo="tenstorrent/tt-forge-fe"
          reports_dir="${RUNNER_TEMP:-/tmp}/reports"
          mkdir -p "$reports_dir"

          get_test_results_from_wf() {
            local wf_name="$1"
            local conclusions="$2"
            local num=5

            echo "---- get_test_results_from_wf start ----"
            echo "Workflow name : $wf_name"
            echo "Allowed conclusions : $conclusions"
            echo "Looking at last $num completed runs on branch 'main'..."

            # fetch runs (use --branch instead of -b)
            echo "Running: gh run list --workflow \"$wf_name\" -R \"$repo\" --branch main -L $num --status completed --json attempt,conclusion,databaseId"
            gh run list --workflow "$wf_name" -R "$repo" --branch main -L "$num" --status completed --json attempt,conclusion,databaseId > runs.json

            echo
            echo "---- RAW runs.json (as written) ----"
            cat runs.json || echo "<failed to cat runs.json>"
            echo "---- end RAW runs.json ----"
            echo

            echo "Saved runs.json (compact summary via jq):"
            echo "Number of runs returned: $(jq 'length' runs.json)"
            jq -r '.[] | "- index: \(. | tostring) | conclusion: \(.conclusion) | databaseId: \(.databaseId) | attempt: \(.attempt)"' runs.json 2>/dev/null || jq -c '.[]' runs.json || true
            echo

            counter=0
            while true; do
              echo "[loop] inspecting index = $counter"

              # read conclusion for this index
              conclusion=$(jq -r ".[$counter].conclusion // empty" runs.json || true)
              echo " -> conclusion at index $counter : '${conclusion}'"

              if echo "$conclusions" | grep -q -w "$conclusion"; then
                echo " -> Found matching conclusion ('$conclusion') at index $counter. Selecting this run."
                break
              else
                echo " -> Conclusion '$conclusion' is NOT in allowed list. Checking next run..."
                ((counter++))

                # Exit if the counter reaches $num
                if [ $counter -ge $num ]; then
                  echo "ERROR: Did not found good workflow within last $num. Exiting."
                  exit 1
                fi
              fi
            done

            curr_wf_id=$(jq -r ".[$counter].databaseId" runs.json)
            curr_wf_att=$(jq -r ".[$counter].attempt" runs.json)

            echo "Selected run details:"
            echo " - databaseId: $curr_wf_id"
            echo " - attempt   : $curr_wf_att"
            echo "curr_$3_wf_link=\"https://github.com/$repo/actions/runs/$curr_wf_id/attempts/$curr_wf_att\"" >> "$GITHUB_OUTPUT"
            rm -f runs.json

            echo "Downloading artifacts 'test-reports-*' for run id $curr_wf_id into $reports_dir ..."
            if gh run download "$curr_wf_id" --pattern "test-reports-*" -R "$repo" -D "$reports_dir"; then
              echo " -> Download completed."
            else
              echo " -> Warning: gh run download failed or no matching artifacts found for run id $curr_wf_id."
            fi

            echo "Listing $reports_dir contents:"
            if ls -lah "$reports_dir" 2>/dev/null; then
              echo " -> Done listing reports_dir"
            else
              echo " -> reports_dir is empty or not accessible"
            fi

            echo "---- get_test_results_from_wf end ----"
            echo
          }

          # Example call
          get_test_results_from_wf "on-nightly.yml" "success,failure" "nightly"

