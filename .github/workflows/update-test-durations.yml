name: Update Test Durations

description: |
  This workflow updates test durations based on the latest nightly and push workflow runs.
  It processes the JUnit XML reports from the last successful nightly and push workflows,
  calculates the test durations, and creates a pull request to update the `.test_durations` file.

on:
  workflow_dispatch:
    inputs:
      override_test_durations:
        description: |
          If true, merge the newly collected test durations into the repository's existing
          `.test_durations` file instead of blindly overwriting it.
          In merge mode the workflow updates only tests whose duration changed by at least
          `duration_offset` seconds.
        required: false
        type: boolean
        default: false
      duration_offset:
        description: |
          Minimum difference (in seconds) required to consider a duration change significant.
          When `override_test_durations` is true, a test duration will be considered "updated"
          only if the absolute difference between the new and the existing value is >= this offset.
        required: false
        type: number
        default: 50
      enable_auto_pr_merge:
        description: |
          If true, the workflow will attempt to automatically merge the created pull request
          after it is created.
        required: false
        type: boolean
        default: false

  workflow_call:
    inputs:
      override_test_durations:
        description: |
          If true, merge the newly collected test durations into the repository's existing
          `.test_durations` file instead of blindly overwriting it.
          In merge mode the workflow updates only tests whose duration changed by at least
          `duration_offset` seconds.
        required: false
        type: boolean
        default: false
      duration_offset:
        description: |
          Minimum difference (in seconds) required to consider a duration change significant.
          When `override_test_durations` is true, a test duration will be considered "updated"
          only if the absolute difference between the new and the existing value is >= this offset.
        required: false
        type: number
        default: 50
      enable_auto_pr_merge:
        description: |
          If true, the workflow will attempt to automatically merge the created pull request
          after it is created.
        required: false
        type: boolean
        default: false


permissions:
  packages: write
  checks: write

jobs:
  update_test_durations:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          # ref: main
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          set -euo pipefail
          echo "Upgrading pip and installing Python deps..."
          python -m pip install --upgrade pip
          pip install openpyxl loguru
      - name: Process nightly test durations
        id: get-test-durations
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          set -euo pipefail

          repo="tenstorrent/tt-forge-fe"
          reports_dir="${RUNNER_TEMP:-/tmp}/reports"
          mkdir -p "$reports_dir"

          get_test_results_from_wf() {
            local wf_name="$1"
            local conclusions="$2"
            local num=5

            # get json of the last $num workflow runs
            gh run list --workflow $wf_name -R $repo -b main -L $num --status completed --json attempt,conclusion,databaseId >runs.json

            counter=0
            while true; do
              # Check the status of 'conclusion'
              conclusion=$(jq -r ".[$counter].conclusion" runs.json)

              if echo "$conclusions" | grep -q -w "$conclusion"; then
                break
              else
                ((counter++))

                # Exit if the counter reaches $num
                if [ $counter -ge $num ]; then
                  echo "ERROR: Did not found good workflow within last $num. Exiting."
                  exit 1
                fi
              fi
            done
            curr_wf_id=$(jq -r ".[$counter].databaseId" runs.json)

            echo "Selected run details:"
            echo " - Workflow Name: $wf_name"
            echo " - Workflow ID: $curr_wf_id"
            echo "curr_$3_wf_link=\"https://github.com/$repo/actions/runs/$curr_wf_id\"" >> "$GITHUB_OUTPUT"
            rm -f runs.json

            echo "Downloading artifacts 'test-reports-*' for run id $curr_wf_id into $reports_dir ..."
            if gh run download "$curr_wf_id" --pattern "test-reports-*" -R "$repo" -D "$reports_dir"; then
              echo " -> Download completed."
            else
              echo " -> Warning: gh run download failed or no matching artifacts found for run id $curr_wf_id."
            fi
          }

          # get test results from the last nightly that was success or failure
          get_test_results_from_wf "on-nightly.yml" "success,failure" "nightly"

          # get test results from the last successful push
          get_test_results_from_wf "on-push.yml" "success" "push"

          default_duration_offset=50
          # inputs are expanded by GH runner; fall back to default if empty
          offset=$(if [ -z "${{ inputs.duration_offset }}" ]; then echo $default_duration_offset; else echo ${{ inputs.duration_offset }}; fi)
          echo "Using offset: $offset"

          # build args for the Python script
          command_args=(
            "--junit_xml_report_dir_path" "$reports_dir"
            "--out_file_path" ".test_durations"
            "--xlsx_report_file_path" "test_duration_report.xlsx"
            "--offset" "$offset"
          )
          if [[ -n "${{ inputs.override_test_durations }}" && "${{ inputs.override_test_durations }}" == "true" ]]; then
            command_args+=("--override_test_durations")
          fi

          echo "Running Python duration extractor with args: ${command_args[*]}"
          python .github/workflows/get_test_duration_from_junit_xmls.py "${command_args[@]}"

          echo "TODAY=$(date +'%Y-%m-%d')" >> "$GITHUB_OUTPUT"

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v7
        id: create-pr
        with:
          branch: test-durations-update
          committer: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
          author: ${{ github.actor }} <${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com>
          base: main
          commit-message: "Update test durations based on latest nightly ${{ steps.get-test-durations.outputs.TODAY }}"
          title: "Update test durations based on latest nightly ${{ steps.get-test-durations.outputs.TODAY }}"
          body: "This PR updates test durations based on latest nightly (${{ steps.get-test-durations.outputs.curr_nightly_wf_link }}) and latest push (${{ steps.get-test-durations.outputs.curr_push_wf_link }})"
          labels: tooling
          delete-branch: true
          token: ${{ secrets.GH_TOKEN }}

      - name: Enable Pull Request Automerge
        if: ${{ inputs.enable_auto_pr_merge == 'true' && steps.create-pr.outputs.pull-request-number }}
        run: gh pr merge --squash --auto "${{ steps.create-pr.outputs.pull-request-number }}"
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Upload Test Duration Report
        uses: actions/upload-artifact@v4
        if: success() || failure()
        with:
          name: test-duration-report
          path: test_duration_report.xlsx

      - name: Generate Summary
        run: |
          echo "## Test duration report" >> $GITHUB_STEP_SUMMARY
          echo "Used [Nightly](${{ steps.get-test-durations.outputs.curr_nightly_wf_link }})" >> $GITHUB_STEP_SUMMARY
          echo "And [Push](${{ steps.get-test-durations.outputs.curr_push_wf_link }})" >> $GITHUB_STEP_SUMMARY
          echo "Generated test durations in [Pull Request](${{ steps.create-pr.outputs.pull-request-url }})" >> $GITHUB_STEP_SUMMARY
