name: Build

on:
  workflow_dispatch:
    inputs:
      mlir_override:
        description: 'Git SHA of commit in tenstorrent/tt-mlir or branch name'
        required: false
        type: string
      build:
        description: 'Build type (Release or Debug)'
        required: false
        default: 'All'
        type: choice
        options:
          - All      # Build both Release and Debug
          - Release
          - Debug
          - None     # Build nothing
  workflow_call:
    inputs:
      mlir_override:
        description: 'Git SHA of commit in tenstorrent/tt-mlir or branch name'
        required: false
        type: string
      docker-image:
        description: 'Docker image to use for build'
        required: true
        type: string
      build:
        description: 'Build type (Release, Debug, All)'
        required: false
        default: 'All'
        type: string
    outputs:
      run_id:
        description: 'Run id the workflow where to find installation (or undefined if build is not successful)'
        value: ${{ jobs.build-conclusion.outputs.run_id }}

jobs:

  forge-build:
    if: ${{ inputs.build == 'All' || inputs.build == 'Release' }}

    strategy:
      fail-fast: false
      matrix:
        build: [
          { runs-on: tt-beta-ubuntu-2204-large, build-type: Release },
        ]

    runs-on:
      - ${{ matrix.build.runs-on }}

    container:
      image: ${{ inputs.docker-image }}

    steps:

    - name: Fetch job id
      id: fetch-job-id
      uses: tenstorrent/tt-github-actions/.github/actions/job_id@main
      with:
        job_name: "${{ github.job }}"

    - name: Set reusable strings
      id: strings
      shell: bash
      env:
        JOB_ID: ${{ steps.fetch-job-id.outputs.job_id }}
      run: |
        echo "work-dir=$(pwd)" >> "$GITHUB_OUTPUT"
        echo "build-output-dir=$(pwd)/build" >> "$GITHUB_OUTPUT"

    - name: Git safe dir
      run: |
        git config --system --add safe.directory ${{ steps.strings.outputs.work-dir }}
        chown -R root:root ${{ steps.strings.outputs.work-dir }}

    - uses: actions/checkout@v4
      with:
          submodules: recursive
          clean: true
          fetch-depth: 0 # Fetch all history and tags

    # Clean everything from submodules (needed to avoid issues
    # with cmake generated files leftover from previous builds)
    - name: Cleanup submodules
      run: |
          git submodule foreach --recursive git clean -ffdx
          git submodule foreach --recursive git reset --hard

    - name: Update submodule if mlir_override is set
      if: ${{ inputs.mlir_override }}
      run: |
        cd third_party/tt-mlir
        git fetch
        git checkout ${{ inputs.mlir_override }}
        branch_name=$(git rev-parse --abbrev-ref HEAD)
        commit_sha=$(git rev-parse HEAD)
        commit_title=$(git log -1 --pretty=%s)
        echo "Branch name: $branch_name"
        echo "Commit SHA: $commit_sha"
        echo "Commit title: $commit_title"
        echo "::notice::Using tt-mlir branch: $branch_name, commit: $commit_sha, title: $commit_title"
        cd ../..

    - name: ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        create-symlink: true
        key: forge-build-${{ matrix.build.build-type }}

    - name: Build (creates tvm and tt-forge-fe wheels)
      shell: bash
      run: |
        source env/activate
        python3 setup.py bdist_wheel
        cd third_party/tvm/python
        python3 setup.py bdist_wheel
        cd ../../..
        cp third_party/tvm/python/dist/*.whl dist/

    - name: Upload Build
      uses: actions/upload-artifact@v4
      if: success() || failure()
      with:
        name: forge-wheel
        path: dist/*.whl


  unit-test-build:
    if: ${{ inputs.build == 'All' || inputs.build == 'Debug' }}

    strategy:
      fail-fast: false
      matrix:
        build: [
          { runs-on: tt-beta-ubuntu-2204-large, build-type: Debug },
        ]

    runs-on:
      - ${{ matrix.build.runs-on }}

    container:
      image: ${{ inputs.docker-image }}

    steps:

      - name: Fetch job id
        id: fetch-job-id
        uses: tenstorrent/tt-github-actions/.github/actions/job_id@main
        with:
          job_name: "${{ github.job }}"

      - name: Set reusable strings
        id: strings
        shell: bash
        env:
          JOB_ID: ${{ steps.fetch-job-id.outputs.job_id }}
        run: |
          echo "work-dir=$(pwd)" >> "$GITHUB_OUTPUT"
          echo "build-output-dir=$(pwd)/build" >> "$GITHUB_OUTPUT"
          echo "install-output-dir=$(pwd)/install" >> "$GITHUB_OUTPUT"
          echo "test_report_path=report_$JOB_ID.xml" >> "$GITHUB_OUTPUT"

      - name: Git safe dir
        run: |
          git config --system --add safe.directory ${{ steps.strings.outputs.work-dir }}
          chown -R root:root ${{ steps.strings.outputs.work-dir }}

      - uses: actions/checkout@v4
        with:
            submodules: recursive
            clean: true
            fetch-depth: 0 # Fetch all history and tags

      # Clean everything from submodules (needed to avoid issues
      # with cmake generated files leftover from previous builds)
      - name: Cleanup submodules
        run: |
            git submodule foreach --recursive git clean -ffdx
            git submodule foreach --recursive git reset --hard

      - name: Update submodule if mlir_override is set
        if: ${{ inputs.mlir_override }}
        run: |
          cd third_party/tt-mlir
          git fetch
          git checkout ${{ inputs.mlir_override }}
          branch_name=$(git rev-parse --abbrev-ref HEAD)
          commit_sha=$(git rev-parse HEAD)
          commit_title=$(git log -1 --pretty=%s)
          echo "Branch name: $branch_name"
          echo "Commit SHA: $commit_sha"
          echo "Commit title: $commit_title"
          echo "::notice::Using tt-mlir branch: $branch_name, commit: $commit_sha, title: $commit_title"
          cd ../..

      - name: ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          create-symlink: true
          max-size: 900M
          key: forge-build-${{ matrix.build.build-type }}
        env:
          CCACHE_NOHASHDIR: true
          CCACHE_BASEDIR: ${{ steps.strings.outputs.work-dir }}

      - name: Debug Build
        shell: bash
        run: |
          source env/activate
          cmake -G Ninja \
          -B ${{ steps.strings.outputs.build-output-dir }} \
          -DCMAKE_BUILD_TYPE=Debug \
          -DCMAKE_C_COMPILER=clang \
          -DCMAKE_CXX_COMPILER=clang++ \
          -DCMAKE_C_COMPILER_LAUNCHER=ccache \
          -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
          -DCODE_COVERAGE=ON
          cmake --build ${{ steps.strings.outputs.build-output-dir }}

      - name: Run Unit Tests
        shell: bash
        run: |
          source env/activate
          cmake --build ${{ steps.strings.outputs.build-output-dir }} -- run_unit_tests

      - name: Prepare code coverage report
        run: |
          lcov --directory build --capture --output-file coverage.info --gcov-tool ${{ steps.strings.outputs.work-dir }}/.github/workflows/gcov_for_clang.sh
          lcov --extract coverage.info '**/tt-forge-fe/forge/csrc/*' --output-file coverage.info
          sed -i 's|SF:/__w/tt-forge-fe/tt-forge-fe/forge/csrc/|SF:csrc/|' coverage.info
          lcov --list coverage.info

      - name: Upload coverage reports to Codecov
        if: success() || failure()
        uses: codecov/codecov-action@v5
        with:
          files: coverage.info
          disable_search: true
          token: ${{ secrets.CODECOV_TOKEN }}

  build-conclusion:
    needs: [forge-build, unit-test-build]
    if: always()
    runs-on: ubuntu-latest
    outputs:
      run_id: ${{ steps.conclusion.outputs.run_id }}
    steps:
      - name: Echo conclusion
        id: conclusion
        shell: bash
        run: |
          if [ "${{ needs.forge-build.result }}" == "success" ]; then
            echo "Forge wheel is available"
            echo "run_id=${{ github.run_id }}" >> $GITHUB_OUTPUT
          else
            echo "Forge wheel is NOT available"
            echo "run_id=" >> $GITHUB_OUTPUT
          fi
