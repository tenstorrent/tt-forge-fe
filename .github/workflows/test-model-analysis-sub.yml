name: Model Analysis Test - subroutine

on:
  workflow_call:
    inputs:
      test_mark:
        description: 'Test mark to run'
        required: false
        default: 'not (skip_model_analysis or out_of_memory)'
        type: string
      test_group_cnt:
        description: 'Test group count'
        required: false
        default: "10"
        type: string
      test_group_ids:
        description: 'Test group ids'
        required: false
        default: '[1,2,3,4,5,6,7,8,9,10]'
        type: string
      docker-image:
        description: 'Docker image to use for build'
        required: true
        type: string
      runs-on:
        description: 'Runs on'
        required: false
        type: string
        default: '[{"runs-on": "n150"}]'
      run_id:
        description: 'Run id the workflow where to find installation (or else it will search)'
        required: false
        type: string
      allow-fail:
        description: 'Allow tests to fail (unstable tests)'
        required: false
        default: false
        type: boolean

jobs:
  run-tests:

    strategy:
      fail-fast: false
      matrix:
        build: ${{ fromJson(inputs.runs-on) }}
        test_group_id: ${{ fromJSON(inputs.test_group_ids) }}

    runs-on:
      - in-service
      - ${{ matrix.build.runs-on }}

    continue-on-error: ${{ inputs.allow-fail }}

    container:
      image: ${{ inputs.docker-image }}
      options: --device /dev/tenstorrent/0
      volumes:
        - /dev/hugepages:/dev/hugepages
        - /dev/hugepages-1G:/dev/hugepages-1G
        - /etc/udev/rules.d:/etc/udev/rules.d
        - /lib/modules:/lib/modules
        - /opt/tt_metal_infra/provisioning/provisioning_env:/opt/tt_metal_infra/provisioning/provisioning_env
        - /mnt/dockercache:/mnt/dockercache

    env:
      HF_TOKEN: ${{ secrets.HF_TOKEN }}
      HF_HOME: /mnt/dockercache/huggingface
      FORGE_MODELS_CACHE: /mnt/dockercache/forge_models_cache
      HF_HUB_DISABLE_PROGRESS_BARS: 1
      FORGE_DISABLE_REPORTIFY_DUMP: 1
      FORGE_EXTRACT_TVM_UNIQUE_OPS_CONFIG: 1
      FORGE_EXPORT_TVM_UNIQUE_OPS_CONFIG_DETAILS: 1

    name: "run-tests ${{ inputs.test_mark }} (${{ matrix.build.runs-on }}, ${{ matrix.test_group_id }})"

    steps:

      - name: Fetch job id
        id: fetch-job-id
        uses: tenstorrent/tt-github-actions/.github/actions/job_id@main
        with:
          job_name: "run-tests ${{ inputs.test_mark }} (${{ matrix.build.runs-on }}, ${{ matrix.test_group_id }})"

      - name: Set reusable strings
        id: strings
        shell: bash
        env:
          JOB_ID: ${{ steps.fetch-job-id.outputs.job_id }}
        run: |
          echo "work-dir=$(pwd)" >> "$GITHUB_OUTPUT"
          echo "build-output-dir=$(pwd)/build" >> "$GITHUB_OUTPUT"

      - name: Git safe dir
        run: git config --global --add safe.directory ${{ steps.strings.outputs.work-dir }}

      - uses: actions/checkout@v4
        with:
          sparse-checkout: |
            env/
            forge/test
            pytest.ini
            conftest.py
            .test_durations

        # Clean everything from submodules (needed to avoid issues
        # with cmake generated files leftover from previous builds)
      - name: Cleanup submodules
        run: |
          git submodule foreach --recursive git clean -ffdx
          git submodule foreach --recursive git reset --hard

      - name: Download wheel
        if: ${{ inputs.run_id }}
        continue-on-error: true
        uses: tenstorrent/tt-forge/.github/actions/download-artifact@main
        with:
          name: forge-wheel
          run_id: ${{ inputs.run_id }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Find and download forge wheel
        if: ${{ !inputs.run_id }}
        uses: dawidd6/action-download-artifact@v9
        with:
          github_token: ${{secrets.GITHUB_TOKEN}}
          workflow_conclusion: success
          workflow_search: true
          workflow: on-push.yml
          name: forge-wheel
          repo: tenstorrent/tt-forge-fe
          check_artifacts: true
          search_artifacts: true

      - name: Install wheel
        shell: bash
        run: |
          source env/activate
          pip install tvm*.whl --force-reinstall
          pip install tt_forge_fe*.whl --force-reinstall


      - name: Extract and Export Unique Ops Configuration
        shell: bash
        run: |
          source env/activate
          pytest forge/test/models/ --splits ${{ inputs.test_group_cnt }} \
                 --group ${{ matrix.test_group_id }} \
                 --splitting-algorithm least_duration \
                 -m "${{ inputs.test_mark }}" \
                 --log-memory-usage \
                 --runxfail \
                 --no-skips \
                 -vss \
                 2>&1 | tee pytest.log

      - name: Upload Test Log
        uses: actions/upload-artifact@v4
        if: success() || failure()
        with:
          name: test-log-${{ matrix.build.runs-on }}-${{ matrix.test_group_id }}-${{ inputs.test_mark }}-${{ steps.fetch-job-id.outputs.job_id }}
          path: pytest.log

      - name: Upload Memory Usage Log
        uses: actions/upload-artifact@v4
        if: success() || failure()
        with:
          name: memory-usage-${{ matrix.build.runs-on }}-${{ matrix.test_group_id }}-${{ inputs.test_mark }}-${{ steps.fetch-job-id.outputs.job_id }}
          path: pytest-memory-usage.csv

      - name: Upload Models Unique Ops Config
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: models-unique-ops-config-${{ steps.fetch-job-id.outputs.job_id }}
          path: generated_modules/
