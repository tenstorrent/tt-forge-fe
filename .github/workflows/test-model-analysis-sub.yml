name: Model Analysis Test - subroutine

on:
  workflow_call:
    inputs:
      test_mark:
        description: 'Test mark to run'
        required: false
        default: 'not (skip_model_analysis or out_of_memory)'
        type: string
      test_group_cnt:
        description: 'Test group count'
        required: false
        default: "10"
        type: string
      test_group_ids:
        description: 'Test group ids'
        required: false
        default: '[1,2,3,4,5,6,7,8,9,10]'
        type: string
      docker-image:
        description: 'Docker image to use for build'
        required: true
        type: string
      runs-on:
        description: 'Runs on'
        required: false
        type: string
        default: '[{"runs-on": "runner"}]'
      run_id:
        description: 'Run id the workflow where to find installation (or else it will search)'
        required: false
        type: string
      tests_to_filter:
        description: 'Filter specific tests'
        required: false
        type: string
      allow-fail:
        description: 'Allow tests to fail (unstable tests)'
        required: false
        default: false
        type: boolean
      sh-runner:
        description: 'Run tests using shared runners'
        required: false
        type: boolean
      max-job-duration-minutes:
        description: 'Set maximum execution time for the job in minutes. If the job exceeds this limit it will be cancelled and marked failed'
        required: false
        type: number
        default: 360

jobs:
  run-tests:

    timeout-minutes: ${{ inputs.max-job-duration-minutes }}
    strategy:
      fail-fast: false
      matrix:
        build: ${{ fromJson(inputs.runs-on) }}
        test_group_id: ${{ fromJSON(inputs.test_group_ids) }}

    runs-on: ${{ inputs.sh-runner && format('tt-beta-ubuntu-2204-{0}-large-stable', matrix.build.runs-on) || fromJson(format('["{0}", "in-service"]', matrix.build.runs-on)) }}

    continue-on-error: ${{ inputs.allow-fail }}

    container:
      image: ${{ inputs.sh-runner && format('harbor.ci.tenstorrent.net/{0}', inputs.docker-image) || inputs.docker-image }}
      options: --device /dev/tenstorrent/0
      volumes:
        - /dev/hugepages:/dev/hugepages
        - /dev/hugepages-1G:/dev/hugepages-1G
        - /etc/udev/rules.d:/etc/udev/rules.d
        - /lib/modules:/lib/modules
        - /opt/tt_metal_infra/provisioning/provisioning_env:/opt/tt_metal_infra/provisioning/provisioning_env
        - /mnt/dockercache:/mnt/dockercache

    env:
      HF_TOKEN: ${{ secrets.HF_TOKEN }}
      HF_HOME: /mnt/dockercache/huggingface
      IRD_LF_CACHE: ${{ vars.IRD_LF_CACHE }}
      FORGE_MODELS_CACHE: /mnt/dockercache/forge_models_cache
      HF_HUB_DISABLE_PROGRESS_BARS: 1
      FORGE_DISABLE_REPORTIFY_DUMP: 1
      FORGE_EXTRACT_TVM_UNIQUE_OPS_CONFIG: 1
      FORGE_EXPORT_TVM_UNIQUE_OPS_CONFIG_DETAILS: 1

    name: "run-tests ${{ inputs.test_mark }} (${{ inputs.sh-runner && format('{0}-shared', matrix.build.runs-on) || (matrix.build.runs-on) }}, ${{ matrix.test_group_id }})"

    steps:

      - name: Fetch job id
        id: fetch-job-id
        uses: tenstorrent/tt-github-actions/.github/actions/job_id@main
        with:
          job_name: "run-tests ${{ inputs.test_mark }} (${{ inputs.sh-runner && format('{0}-shared', matrix.build.runs-on) || (matrix.build.runs-on) }}, ${{ matrix.test_group_id }})"

      - name: Set reusable strings
        id: strings
        shell: bash
        env:
          JOB_ID: ${{ steps.fetch-job-id.outputs.job_id }}
        run: |
          echo "work-dir=$(pwd)" >> "$GITHUB_OUTPUT"
          echo "build-output-dir=$(pwd)/build" >> "$GITHUB_OUTPUT"
          echo "test_report_path=reports/report_$JOB_ID.xml" >> "$GITHUB_OUTPUT"

      - name: Git safe dir
        run: git config --global --add safe.directory ${{ steps.strings.outputs.work-dir }}

      - uses: actions/checkout@v4
        with:
          sparse-checkout: |
            .github/workflows/
            env/
            forge/test
            pytest.ini
            conftest.py
            .test_durations
            scripts/

      - name: Setup Forge Models repo
        shell: bash
        run: |
          git submodule update --init --recursive -f third_party/tt_forge_models

        # Clean everything from submodules (needed to avoid issues
        # with cmake generated files leftover from previous builds)
      - name: Cleanup submodules
        run: |
          git submodule foreach --recursive git clean -ffdx
          git submodule foreach --recursive git reset --hard

      - name: Download wheel
        if: ${{ inputs.run_id }}
        continue-on-error: true
        uses: tenstorrent/tt-forge/.github/actions/download-artifact@main
        with:
          name: forge-wheel
          run_id: ${{ inputs.run_id }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Find and download forge wheel
        if: ${{ !inputs.run_id }}
        uses: dawidd6/action-download-artifact@v9
        with:
          github_token: ${{secrets.GITHUB_TOKEN}}
          workflow_conclusion: success
          workflow_search: true
          workflow: on-push.yml
          name: forge-wheel
          repo: tenstorrent/tt-forge-fe
          check_artifacts: true
          search_artifacts: true

      - name: Install wheel
        shell: bash
        run: |
          source env/activate
          pip install tt_tvm*.whl --force-reinstall
          pip install tt_forge_fe*.whl --force-reinstall


      - name: Extract and Export Unique Ops Configuration
        shell: bash
        run: |
          set -o pipefail
          source env/activate
          echo "Collecting tests for group ${{ matrix.test_group_id }} with mark '${{ inputs.test_mark }}'..."
          set +e
          pytest_args=(
            "--splits" "${{ inputs.test_group_cnt }}"
            "--group" "${{ matrix.test_group_id }}"
            "--splitting-algorithm" "least_duration"
            "-m" "${{ inputs.test_mark }}"
            "--collect-only"
            "-q"
          )
          if [ -n "${{ inputs.tests_to_filter }}" ]; then
            # Split on commas and trim whitespace
            IFS=',' read -r -a test_filters <<< "${{ inputs.tests_to_filter }}"
            pytest_args+=("--tests_to_filter")
            for tf in "${test_filters[@]}"; do
              pytest_args+=("$(echo "$tf" | xargs)")
            done
          fi
          pytest forge/test/models/ "${pytest_args[@]}" \
                | sed -n '/^Collected tests /,/^collected /p' | sed '/^[Cc]ollected /d' >.pytest_tests_to_run

          if [ $? -ne 0 ]; then
            echo "Failed to collect tests. Doing dry run..."
            set -e
            pytest forge/test/models/ "${pytest_args[@]}"
            exit 1
          fi
          echo "Collected tests."
          cat .pytest_tests_to_run

          python .github/workflows/test_runner.py  \
               --continue-after-crash \
               --log-memory-usage \
               --runxfail \
               --no-skips \
               -v \
            2>&1 | tee extract-and-export-unique-ops-configs.log
          exit_code=${PIPESTATUS[0]}
          exit $exit_code

      - name: Upload Extract And Export Unique Ops Configs Log
        uses: actions/upload-artifact@v4
        if: success() || failure()
        with:
           name: extract-and-export-unique-ops-configs-log-${{ matrix.build.runs-on }}-${{ matrix.test_group_id }}-${{ inputs.test_mark }}-${{ steps.fetch-job-id.outputs.job_id }}
           path: extract-and-export-unique-ops-configs.log

      - name: Upload Memory Usage Log
        uses: actions/upload-artifact@v4
        if: success() || failure()
        with:
          name: memory-usage-${{ matrix.build.runs-on }}-${{ matrix.test_group_id }}-${{ inputs.test_mark }}-${{ steps.fetch-job-id.outputs.job_id }}
          path: pytest-memory-usage.csv

      - name: Upload Models Unique Ops Config
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: models-unique-ops-config-${{ steps.fetch-job-id.outputs.job_id }}
          path: generated_modules/

      - name: Extract and Run Failed tests
        id: extract-and-run-failed-tests
        if: success() || failure()
        shell: bash
        run: |
          set -euo pipefail

          contains_failed_tests=false

          # ensure we always write the output on exit (success or failure)
          trap 'echo "contains_failed_tests=${contains_failed_tests}" >> "$GITHUB_OUTPUT"' EXIT

          source env/activate

          # If the file exists, remove it first (start with a clean slate).
          if [[ -f .pytest_tests_to_run ]]; then
            echo "Found existing .pytest_tests_to_run — removing it."
            rm -f .pytest_tests_to_run
          else
            echo "No existing .pytest_tests_to_run found."
          fi

          # Collect failed tests into the file
          python scripts/model_analysis/collect_failed_tests.py \
            --file_paths extract-and-export-unique-ops-configs.log \
            --out_file .pytest_tests_to_run

          # Check whether .pytest_tests_to_run contains any non-whitespace characters.
          if [[ -f .pytest_tests_to_run ]] && grep -q '[^[:space:]]' .pytest_tests_to_run; then
            echo ".pytest_tests_to_run is not empty — running test_runner.py"
            contains_failed_tests=true

            # run the runner; capture exit but don't exit the step immediately
            set +e
            python .github/workflows/test_runner.py \
                --junit-xml=${{ steps.strings.outputs.test_report_path }} \
                --runxfail \
                --no-skips \
                -vss \
              2>&1 | tee failed-unique-ops-config-extraction.log
            rc=${PIPESTATUS[0]}
            set -e

            # propagate runner exit code (so the step fails if tests failed)
            exit $rc
          else
            echo ".pytest_tests_to_run is empty — skipping test_runner.py"
            contains_failed_tests=false
            # explicit success
            exit 0
          fi

      - name: Upload Unique Ops Configs Extraction Failure Log
        uses: actions/upload-artifact@v4
        if: ${{ always() && steps.extract-and-run-failed-tests.outputs.contains_failed_tests == 'true' }}
        with:
          name: failed-unique-ops-config-extraction-log-${{ matrix.build.runs-on }}-${{ matrix.test_group_id }}-${{ inputs.test_mark }}-${{ steps.fetch-job-id.outputs.job_id }}
          path: failed-unique-ops-config-extraction.log

      - name: Upload Failed Test Report
        uses: actions/upload-artifact@v4
        if: ${{ always() && steps.extract-and-run-failed-tests.outputs.contains_failed_tests == 'true' }}
        with:
          name: test-reports-${{ matrix.build.runs-on }}-${{ matrix.test_group_id }}-${{ steps.fetch-job-id.outputs.job_id }}
          path: ${{ steps.strings.outputs.test_report_path }}

      - name: Show Failed Test Report
        uses: mikepenz/action-junit-report@v5
        if: ${{ always() && steps.extract-and-run-failed-tests.outputs.contains_failed_tests == 'true' }}
        with:
          report_paths: ${{ steps.strings.outputs.test_report_path }}
          check_name: TT-Forge-FE Tests
          comment: false
          updateComment: false
          detailed_summary: true
          group_suite: true
