ARG FROM_TAG=latest

FROM ghcr.io/tenstorrent/tt-forge-fe/tt-forge-fe-base-ubuntu-22-04:${FROM_TAG} AS ci-build
SHELL ["/bin/bash", "-c"]

# Set environment variables
ENV PROJECT_NAME=tt-forge-fe
ENV TTFORGE_PYTHON_VERSION=python3.11
ENV TTFORGE_VENV_DIR=/opt/ttforge-toolchain/venv

# Create a directory for the build and toolchain
ARG BUILD_DIR=/home/build
RUN mkdir -p $BUILD_DIR && \
    mkdir -p $TTMLIR_TOOLCHAIN_DIR && \
    mkdir -p $TTFORGE_TOOLCHAIN_DIR

# Copy the project to the container
ADD . $BUILD_DIR/$PROJECT_NAME

# Build the toolchain
WORKDIR $BUILD_DIR/$PROJECT_NAME

# Show last commit
RUN git log -1

# Install dev requirements into the same venv as base using env/activate
RUN source env/activate && \
    pip install --no-cache-dir -r env/dev_requirements.txt

# Build and install the toolchain
WORKDIR $BUILD_DIR/$PROJECT_NAME

# Install forge and build toolchain
RUN source env/activate && \
    pip install -e . && \
    cmake -B env/build env && \
    cmake --build env/build

FROM ghcr.io/tenstorrent/tt-forge-fe/tt-forge-fe-base-ubuntu-22-04:${FROM_TAG} AS ci

# Copy the TTMLIR_TOOLCHAIN_DIR from the previous stage

ENV TTMLIR_TOOLCHAIN_DIR=/opt/ttmlir-toolchain
ENV TTFORGE_TOOLCHAIN_DIR=/opt/ttforge-toolchain
ENV TTFORGE_VENV_DIR=/opt/ttforge-toolchain/venv

RUN echo "Copying from ci-build stage $TTMLIR_TOOLCHAIN_DIR"
COPY --from=ci-build $TTMLIR_TOOLCHAIN_DIR $TTMLIR_TOOLCHAIN_DIR

RUN echo "Copying from ci-build stage $TTFORGE_TOOLCHAIN_DIR"
COPY --from=ci-build $TTFORGE_TOOLCHAIN_DIR $TTFORGE_TOOLCHAIN_DIR

# Show directory sizes
RUN du -h --max-depth=2 $TTMLIR_TOOLCHAIN_DIR && \
    du -h --max-depth=2 $TTFORGE_TOOLCHAIN_DIR

# Copy project files and install forge in final stage
COPY . /tmp/tt-forge-fe/
RUN source $TTFORGE_VENV_DIR/bin/activate && \
    cd /tmp/tt-forge-fe && \
    source env/activate && \
    pip install -e . && \
    cd / && \
    rm -rf /tmp/tt-forge-fe
