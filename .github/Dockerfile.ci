ARG FROM_TAG=latest

FROM ghcr.io/tenstorrent/tt-forge-fe/tt-forge-fe-base-ubuntu-22-04:${FROM_TAG} AS ci-build
SHELL ["/bin/bash", "-c"]

# Set environment variables
ENV PROJECT_NAME=tt-forge-fe
ARG BUILD_DIR=/home/build

# Copy the project to the container
ADD . $BUILD_DIR/$PROJECT_NAME

# Build the toolchain
WORKDIR $BUILD_DIR/$PROJECT_NAME

# Show last commit
RUN git log -1

# Build the toolchain
WORKDIR $BUILD_DIR/$PROJECT_NAME
RUN source env/activate && \
    cmake -B env/build env && \
    cmake --build env/build

FROM ghcr.io/tenstorrent/tt-forge-fe/tt-forge-fe-base-ubuntu-22-04:${FROM_TAG} AS ci

# Set environment variables
ENV PROJECT_NAME=tt-forge-fe
ARG BUILD_DIR=/home/build

# Copy the project files (needed for env/activate)
COPY --from=ci-build $BUILD_DIR/$PROJECT_NAME $BUILD_DIR/$PROJECT_NAME

# Set working directory to project root
WORKDIR $BUILD_DIR/$PROJECT_NAME

# Copy the toolchain directories from the build stage
RUN echo "Copying from ci-build stage $TTMLIR_TOOLCHAIN_DIR"
COPY --from=ci-build $TTMLIR_TOOLCHAIN_DIR $TTMLIR_TOOLCHAIN_DIR

RUN echo "Copying from ci-build stage $TTFORGE_TOOLCHAIN_DIR"
COPY --from=ci-build $TTFORGE_TOOLCHAIN_DIR $TTFORGE_TOOLCHAIN_DIR

RUN du -h --max-depth=2 $TTMLIR_TOOLCHAIN_DIR
RUN du -h --max-depth=2 $TTFORGE_TOOLCHAIN_DIR

# Install dev requirements on top of base image (which already has core requirements)
COPY env/dev_requirements.txt /tmp/dev_requirements.txt
RUN source env/activate && \
    pip install --ignore-installed -r /tmp/dev_requirements.txt
