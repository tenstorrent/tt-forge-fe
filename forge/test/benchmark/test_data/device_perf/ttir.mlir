#loc = loc("AdvIndexWrapper":0:0)
#system_desc = #tt.system_desc<[{role = host, target_triple = "x86_64-pc-linux-gnu"}], [{arch = <wormhole_b0>, grid = 8x8, coord_translation_offsets = 18x18, l1_size = 1499136, num_dram_channels = 12, dram_channel_size = 1073741824, noc_l1_address_align_bytes = 16, pcie_address_align_bytes = 32, noc_dram_address_align_bytes = 32, l1_unreserved_base = 1024, erisc_l1_unreserved_base = 1024, dram_unreserved_base = 1024, dram_unreserved_end = 1073741824, physical_helper_cores = {dram = [ 8x0,  9x0,  10x0,  8x1,  9x1,  10x1,  8x2,  9x2,  10x2,  8x3,  9x3,  10x3]}, supported_data_types = [<f32>, <f16>, <bf16>, <bfp_f8>, <bfp_bf8>, <bfp_f4>, <bfp_bf4>, <bfp_f2>, <bfp_bf2>, <u32>, <u16>, <u8>, <si32>], supported_tile_sizes = [ 4x16,  16x16,  32x16,  4x32,  16x32,  32x32], dst_register_size_tiles = 8, num_cbs = 32, num_compute_threads = 1, num_datamovement_threads = 2}], [0], [3 : i32], [ 0x0x0x0]>
module @AdvIndexWrapper attributes {tt.system_desc = #system_desc} {
  func.func @forward(%arg0: tensor<2x4x8x16xf32> {tt.argument_type = #tt.argument_type<input>, ttir.name = "advindex_input"} loc("AdvIndexWrapper":0:0), %arg1: tensor<2xi32> {tt.argument_type = #tt.argument_type<input>, ttir.name = "indeces"} loc("AdvIndexWrapper":0:0)) -> (tensor<2x2x8x16xf32> {ttir.name = "advindex_op.output_adv_index_17"}) {
    %0 = ttir.empty() : tensor<4x2x8x16xf32> loc(#loc1)
    %1 = "ttir.transpose"(%arg0, %0) <{dim0 = -3 : si32, dim1 = -4 : si32}> : (tensor<2x4x8x16xf32>, tensor<4x2x8x16xf32>) -> tensor<4x2x8x16xf32> loc(#loc1)
    %2 = ttir.empty() : tensor<4x256xf32> loc(#loc2)
    %3 = "ttir.reshape"(%1, %2) <{shape = [4 : i32, 256 : i32]}> : (tensor<4x2x8x16xf32>, tensor<4x256xf32>) -> tensor<4x256xf32> loc(#loc2)
    %4 = ttir.empty() : tensor<2x256xf32> loc(#loc3)
    %5 = "ttir.embedding"(%arg1, %3, %4) : (tensor<2xi32>, tensor<4x256xf32>, tensor<2x256xf32>) -> tensor<2x256xf32> loc(#loc3)
    %6 = ttir.empty() : tensor<2x2x8x16xf32> loc(#loc4)
    %7 = "ttir.reshape"(%5, %6) <{shape = [2 : i32, 2 : i32, 8 : i32, 16 : i32]}> : (tensor<2x256xf32>, tensor<2x2x8x16xf32>) -> tensor<2x2x8x16xf32> loc(#loc4)
    %8 = ttir.empty() : tensor<2x2x8x16xf32> loc(#loc5)
    %9 = "ttir.transpose"(%7, %8) <{dim0 = -4 : si32, dim1 = -3 : si32}> : (tensor<2x2x8x16xf32>, tensor<2x2x8x16xf32>) -> tensor<2x2x8x16xf32> loc(#loc5)
    return %9 : tensor<2x2x8x16xf32> loc(#loc6)
  } loc(#loc)
} loc(#loc)
#loc1 = loc("adv_index_17.dc.transpose.0.dc.transpose.0")
#loc2 = loc("adv_index_17.dc.reshape.1")
#loc3 = loc("adv_index_17.dc.embedding.2")
#loc4 = loc("adv_index_17.dc.reshape.3")
#loc5 = loc("adv_index_17.dc.transpose.4.dc.transpose.0")
#loc6 = loc(unknown)
